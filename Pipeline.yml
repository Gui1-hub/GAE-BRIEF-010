trigger:
  branches:
    include:
      - main  # Déclenche la pipeline pour les commits dans la branche 'main'

pool:
  vmImage: 'ubuntu-latest'  # Utilisation d'une machine virtuelle Ubuntu

variables:
  terraformVersion: '1.9.8'  # Version de Terraform

steps:

  # Étape 1 : Cloner le dépôt GitHub
  - checkout: self  # Syntaxe simplifiée pour le checkout
    displayName: 'Checkout code'

  # Étape 2 : Installer Terraform manuellement
  - script: |
      curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
      sudo apt-add-repository "deb https://apt.releases.hashicorp.com $(lsb_release -cs) main"
      sudo apt-get update
      sudo apt-get install terraform="$(terraformVersion)"
    displayName: 'Install Terraform'

  # Étape 3 : Vérifier le contenu du répertoire
  - script: |
      echo "Checking Build.ArtifactStagingDirectory content"
      ls -la $(Build.ArtifactStagingDirectory)
    displayName: 'Debug Artifact Directory'

  # Étape 4 : Initialiser Terraform
  - script: |
      terraform init || exit 1
    displayName: 'Initialize Terraform'

  # Étape 5 : Vérifier le plan Terraform
  - script: |
      terraform plan -out=tfplan || exit 1
    displayName: 'Terraform Plan'

  # Étape 6 : Appliquer le plan Terraform
  - script: |
      terraform apply -auto-approve tfplan || exit 1
    displayName: 'Terraform Apply'

  # Étape 7 : Vérifier le contenu des artefacts avant publication
  - script: |
      echo "Checking for Terraform artifacts"
      ls -la $(Build.ArtifactStagingDirectory)
    displayName: 'Check Artifacts'

  # Étape 8 : Optionnel - Publier des artefacts
  - task: PublishBuildArtifacts@1  # Publier des artefacts de build, si nécessaire
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'terraform-artifacts'
      publishLocation: 'Container'
    displayName: 'Publish Terraform Artifacts'